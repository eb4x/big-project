---
- name: install zabbix-server
  hosts:
    - uio-provisioner
  become: true

  pre_tasks:
    - package:
        name: container-selinux
        state: latest # >= v2.219.0
    - ansible.posix.seboolean:
        name: container_read_certs
        state: true
        persistent: true

  tasks:
    - name: Create dns entries needed by provisioner
      lineinfile:
        dest: /etc/hosts
        regexp: "{{ item.regexp | default(omit) }}"
        line: "{{ item.address }} {{ item.name }}"
      loop:
        - name: "zabbix.{{ cluster_domain }} zabbix-server.{{ cluster_domain }}"
          address: 127.0.0.1
          regexp: ".*zabbix-server.*"

    - name: Dump specialized zabbix configuration for dnsmasq
      copy:
        content: |
          address=/zabbix-server.{{ cluster_domain }}/{{ listen_address }}
        dest: /etc/dnsmasq.d/zabbix.conf
        mode: '0644'
      vars:
        interface_list: "{{ ansible_facts.interfaces | map('replace', '-', '_') | map('extract', ansible_facts) }}"
        interfaces_with_ipv4: "{{ interface_list | selectattr('ipv4', 'defined') }}"
        ipv4_addresses: "{{ interfaces_with_ipv4 | map(attribute='ipv4.address') }}"
        listen_address: "{{ ipv4_addresses | ansible.utils.ipaddr(baremetal_network_ipv4_cidr | default('10.0.0.0/16')) | first }}"
      notify: restart dnsmasq

    - name: handle server-secrets
      when:
        - zabbix_server_tls_key is defined
        - zabbix_server_tls_cert is defined
        - zabbix_server_tls_intermediate is defined
        - zabbix_server_tls_ca is defined
      containers.podman.podman_secret:
        name: zabbix-server-tls
        force: true
        data: |
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: zabbix-server-tls
          type: Opaque
          data:
            zabbix-ca.crt: {{ (zabbix_server_tls_intermediate ~ zabbix_server_tls_ca) | b64encode }}
            zabbix-server.crt: {{ zabbix_server_tls_cert | b64encode }}
            zabbix-server.key: {{ zabbix_server_tls_key | b64encode }}
      become: false

    - name: handle web-secrets
      when:
        - zabbix_web_ssl_key is defined
        - zabbix_web_ssl_cert is defined
      block:
        - community.crypto.openssl_dhparam:
            path: dhparam.pem
            return_content: true
          register: _dhparam_pem

        - containers.podman.podman_secret:
            name: zabbix-web-ssl
            force: true
            data: |
              ---
              apiVersion: v1
              kind: Secret
              metadata:
                name: zabbix-web-ssl
              type: Opaque
              data:
                ssl.crt: {{ zabbix_web_ssl_cert | b64encode }}
                ssl.key: {{ zabbix_web_ssl_key | b64encode }}
                dhparam.pem: {{ _dhparam_pem.dhparams | b64encode }}
          become: false

    - name: copy zabbix kubeplay
      template:
        src: zabbix-mysql-pod.yaml.j2
        dest: zabbix-mysql-pod.yaml
        mode: '0644'
      vars:
        #zabbix_version: trunk
        zabbix_version: 7.0-latest
        #zabbix_version: 6.4-latest
        #zabbix_version: 6.0-latest
        zabbix_https_port: 10443
        mysql_version: 10.6
        mysql_password: "{{ lookup('password', '~/.ansible/.zabbix_mysql_password') }}"
      register: _zabbix_pod_config

    - name: enable lingering for systemd user processes
      command: loginctl enable-linger
      args:
        creates: "/var/lib/systemd/linger/{{ ansible_user }}"

    - name: prop up zabbix pod
      containers.podman.podman_play:
        kube_file: zabbix-mysql-pod.yaml
        state: started
        recreate: "{{ _zabbix_pod_config is changed | ternary(true, false) }}"
      become: false

    - name: open zabbix ports
      ansible.posix.firewalld:
        port: "{{ item.port }}"
        immediate: true
        permanent: true
        state: "{{ item.state | default('enabled') }}"
      loop:
        - port: 8080/tcp
        - port: 10051/tcp
        - port: 10443/tcp
          state: "{{ (zabbix_web_ssl_key is defined and zabbix_web_ssl_cert is defined) | ternary('enabled', 'disabled') }}"

    - name: wait_for zabbix
      uri:
        url: "https://zabbix.openshift-utv.uio.no:10443/api_jsonrpc.php"
        method: POST
        headers:
          Content-Type: application/json-rpc
        body_format: json
        body:
          jsonrpc: "2.0"
          method: apiinfo.version
          params: []
          id: 0
        return_content: true
      register: _res
      retries: 10
      delay: 10
      until:
        - _res.status == 200
        - _res.json.error is not defined

    - debug:
        var: _res

  handlers:
    - name: restart dnsmasq
      service:
        name: dnsmasq
        state: restarted

- name: configure zabbix-server
  hosts:
    - zabbix.openshift-utv.uio.no

  tasks:
    - name: configure Zabbix server agent as active
      community.zabbix.zabbix_host:
        host_name: Zabbix server
        interfaces: []
        link_templates:
          - Zabbix server health
          - Linux by Zabbix agent active

    - name: get Zabbix server info
      community.zabbix.zabbix_host_info:
        host_name: Zabbix server
      register: _zabbix_host

    - name: remove passive agent interface on Zabbix server if present
      when: _zabbix_host | json_query(passive_interface_id) is not none
      vars:
#        zabbix_server: "[?host=='Zabbix server'] | [0]"
#        passive_port: "[?port=='10050'] | [0]"
        passive_interface_id: "hosts[?host=='Zabbix server'] | [0].hostinterfaces[?port=='10050'].interfaceid | [0]"
      block:
        - name: get auth token
          when: ansible_zabbix_auth_key is not defined
          uri:
            url: "http://{{ ansible_host }}:8080/api_jsonrpc.php"
            method: POST
            headers:
              Content-Type: application/json-rpc
            body_format: json
            body:
              jsonrpc: "2.0"
              method: user.login
              params:
                username: "{{ ansible_user }}"
                password: "{{ ansible_httpapi_pass }}"
              id: 1
            return_content: true
          register: _auth

        - name: remove Zabbix server passive agent interface
          uri:
            url: "http://{{ ansible_host }}:8080/api_jsonrpc.php"
            method: POST
            headers:
              Content-Type: application/json-rpc
            body_format: json
            body:
              jsonrpc: "2.0"
              auth: "{{ ansible_zabbix_auth_key | default(_auth.json.result) }}"
              method: hostinterface.delete
              params:
                - "{{ _zabbix_host | json_query(passive_interface_id) }}"
              id: 2
            return_content: true

    - name: cert on zabbix-agent on Zabbix server
      #when:
      #  - zabbix_server_tls_key is defined
      #  - zabbix_server_tls_cert is defined
      #  - zabbix_server_tls_ca is defined
      community.zabbix.zabbix_host:
        host_name: Zabbix server
        host_groups:
          - Zabbix servers
        link_templates:
          - Linux by Zabbix agent active
          - Zabbix server health
        tls_accept: 4  # (certificate)
        tls_issuer: "CN=GEANT OV ECC CA 4,O=GEANT Vereniging,C=NL"
        tls_subject: "CN=zabbix-server.openshift-utv.uio.no,O=Universitetet i Oslo,ST=Oslo,C=NO"

    - name: register proxy
      community.zabbix.zabbix_proxy:
        proxy_name: zabbix-proxy.openshift-utv.uio.no
        tls_accept: certificate
        tls_issuer: "CN=GEANT OV ECC CA 4,O=GEANT Vereniging,C=NL"
        tls_subject: "CN=zabbix-proxy.openshift-utv.uio.no,O=Universitetet i Oslo,ST=Oslo,C=NO"

    - name: create various host groups
      community.zabbix.zabbix_group:
        host_groups:
          - OKD4 clusters

    - name: add mirror-registry
      community.zabbix.zabbix_host:
        host_name: mirror-registry.openshift-utv.uio.no
        host_groups:
          - Applications

    - name: add openshift-utv
      community.zabbix.zabbix_host:
        proxy: zabbix-proxy.openshift-utv.uio.no
        host_name: openshift-utv.uio.no
        host_groups:
          - OKD4 clusters
        link_templates:
          - Kubernetes cluster state by HTTP
        #  - Kubernetes nodes by HTTP
        macros:
          - { macro: '{$KUBE.CONTROL_PLANE.TAINT}', value: node-role.kubernetes.io/master }
          - { macro: '{$KUBE.API.TOKEN}', value: eyJhbGciOiJSUzI1NiIsImtpZCI6Im1GT0tpendua3pzeEVLMWdKdnhWV2thU3NXTVBvX3JheGNuVnhIQ3ZvaGMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJvcGVuc2hpZnQtbW9uaXRvcmluZyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJ6YWJiaXgtc2VydmljZS1hY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InphYmJpeC1zZXJ2aWNlLWFjY291bnQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1YjMxZTZlNS03MmNlLTRlY2MtOTQ1MS02ZGVlZDZhYmNiNGMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6b3BlbnNoaWZ0LW1vbml0b3Jpbmc6emFiYml4LXNlcnZpY2UtYWNjb3VudCJ9.wuPyufg7D8weDXoyrDcV2L3Z7pGm3ajocSdlT5J5dPuaaB4rqFw4W-W6q2ZVqOmedByiX_SktSCXiWsYE3eDRh7IgafKFxiPPzSDhAZ82MtV7OOk4_k1Qc4gC2sJBNsUPKkyX0BSm78wxLA3yf2qz9xxQVz_Nsmj3EUrsNFlMpPaX5hGt3iZqDvo_qF4fkwghL_4L6X0k-yb0SzQdIRMPDVBpLFobmAK1yXsYznY1PFIOr_KM1T5cz9CerN47wfzirOuvjhP4uObn0yiBR0X-jfaqmMwH-A3qrRUjB9VTXT8Lnl9QwQAOCYtZJHphf8TnNrr-IxypHg0gaCwFNMbGNMz_cSA8gUdW93alRvjH-7VvMk6Qsparogzp4PcqDNvSbSVwttWyperW33d-M5YF1JP47gQcfdM6-XhEI21kFhM6WaM-8yyOMBroY_25pvoxnQ4N-Rtlf1caoEmq6iTdiMnrXM-T4vawX3eY81GN-M3VXGq2c7MZ8KfVMphl2w5eFzswxoGbmIqYKhpCe7DwmZ5cdPBRtChgD5jKSbxixGq-9E8cfje-zXsLP2bblNicWf9X1MtRDrCJbSnZsoG6KJ4zBvrwbN-wLWr0rQm3Dwj77jEsZNGVSXwyt7178M3hY0wADdIGTldRzqz77kcgPJOCHs_wryqR8lcRCO5pCA }
          - { macro: '{$KUBE.API.URL}', value: "https://kubernetes.default.svc.cluster.local:443" }
          - { macro: '{$KUBE.STATE.ENDPOINT.NAME}', value: kube-state-metrics }
          - { macro: '{$KUBE.CONTROLLER_MANAGER.SCHEME}', value: https }
          - { macro: '{$KUBE.CONTROLLER_MANAGER.PORT}', value: 10257 }
          - { macro: '{$KUBE.SCHEDULER.SCHEME}', value: https }
          - { macro: '{$KUBE.SCHEDULER.PORT}', value: 10259 }


#    - debug:
#        var: hostvars[item].bmc.address | urlsplit('hostname')
#      loop: "{{ groups['uio_okd_masters'] }}"
#
#    - name: create various host groups
#      community.zabbix.zabbix_group:
#        host_groups:
#          - Dell PowerEdge R820
#          - HPE ProLiant DL380
#
#    - name: add dell boxes
#      community.zabbix.zabbix_host:
#        host_name: "{{ item }}"
#        host_groups:
#          - Linux servers
#          - Dell PowerEdge R820
#        link_templates:
#          - Template of templates
#        interfaces:
#          - type: ipmi
#            ip: "{{ hostvars[item].bmc.address | urlsplit('hostname') }}"
#            useip: 1
#            main: 1
#        ipmi_username: "{{ hostvars[item].bmc.username }}"
#        ipmi_password: "{{ hostvars[item].bmc.password }}"
#        macros:
#          - macro: '{$API.URL}'
#            value: "https://{{ hostvars[item].bmc.address | urlsplit('hostname') }}"
#          - macro: '{$API.USER}'
#            value: "{{ hostvars[item].bmc.username }}"
#          - macro: '{$API.PASSWORD}'
#            value: "{{ hostvars[item].bmc.password }}"
#          #- macro: '{$IFCONTROL}'
#          #  value: "{{ }}"
#      loop: "{{ groups['uio_okd_masters'] }}"
#
#    - name: add openshift-utv
#      community.zabbix.zabbix_host:
#        host_name: "{{ item.name }}.openshift-utv.uio.no"
#        host_groups:
#          - OKD4 Clusters
#        link_templates: "{{ item.link_templates }}"
#        macros:
#      loop:
#        - name: cluster
#          link_templates:
#        - name: nodes
#          link_templates:
